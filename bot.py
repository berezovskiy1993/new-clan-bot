import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, 
    ConversationHandler, ContextTypes, filters
)

# –¢–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = '7912601677:AAE_saIpU_55S2dgEdnEnnXov0pw33BPVu0'
ADMIN_ID = 894031843  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
NICKNAME, PLAYER_ID, AGE, KD, MATCHES = range(5)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="start_application")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–ª–∞–Ω–∞ DEKTRIAN FAMILY. "
        "–•–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à –∫–ª–∞–Ω? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!", reply_markup=reply_markup
    )
    return ConversationHandler.END

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
async def nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        context.user_data['nickname'] = update.message.text
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_start")],
            [InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next_player_id")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –∞–π–¥–∏:", reply_markup=reply_markup)
        return PLAYER_ID
    return ConversationHandler.END

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ ID
async def player_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        if not update.message.text.isdigit():
            await update.message.reply_text("–ê–π–¥–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
            return PLAYER_ID
        context.user_data['player_id'] = update.message.text
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_nickname")],
            [InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next_age")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=reply_markup)
        return AGE
    return ConversationHandler.END

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        if not update.message.text.isdigit():
            await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
            return AGE
        context.user_data['age'] = update.message.text
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_player_id")],
            [InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next_kd")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ö–∞–∫–∞—è —É —Ç–µ–±—è –ö–î –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–µ–∑–æ–Ω–∞?", reply_markup=reply_markup)
        return KD
    return ConversationHandler.END

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ö–î
async def kd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        if not update.message.text.replace('.', '', 1).isdigit():
            await update.message.reply_text("–ö–î –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
            return KD
        context.user_data['kd'] = update.message.text
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_age")],
            [InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next_matches")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π —Ç—ã —Å—ã–≥—Ä–∞–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–µ–∑–æ–Ω–∞?", reply_markup=reply_markup)
        return MATCHES
    return ConversationHandler.END

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π
async def matches(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        if not update.message.text.isdigit():
            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
            return MATCHES
        context.user_data['matches'] = update.message.text

        user = update.message.from_user
        if user.username:
            user_link = f"@{user.username}"
        else:
            user_link = f"[–ü—Ä–æ—Ñ–∏–ª—å](tg://user?id={user.id})"

        application_text = (
            "üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –∫–ª–∞–Ω DEKTRIAN FAMILY:\n\n"
            f"üë§ Telegram: {user_link}\n"
            f"üéÆ –ù–∏–∫–Ω–µ–π–º: {context.user_data['nickname']}\n"
            f"üÜî –ò–≥—Ä–æ–≤–æ–π ID: {context.user_data['player_id']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
            f"‚öîÔ∏è –ö–î –∑–∞ 2 —Å–µ–∑–æ–Ω–∞: {context.user_data['kd']}\n"
            f"üèÜ –ú–∞—Ç—á–µ–π –∑–∞ 2 —Å–µ–∑–æ–Ω–∞: {context.user_data['matches']}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∑–∞—è–≤–∫—É
        await context.bot.send_message(ADMIN_ID, application_text, parse_mode="Markdown")
        await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "start_application":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:")
        return NICKNAME
    elif data == "next_player_id":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –∞–π–¥–∏:")
        return PLAYER_ID
    elif data == "next_age":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
        return AGE
    elif data == "next_kd":
        await query.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ—é –ö–î –∑–∞ –¥–≤–∞ —Å–µ–∑–æ–Ω–∞:")
        return KD
    elif data == "next_matches":
        await query.message.reply_text("–°–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–µ–∑–æ–Ω–∞?")
        return MATCHES
    elif data == "back_start":
        return await start(update, context)
    elif data == "back_nickname":
        await query.message.reply_text("–í–µ—Ä–Ω–∏—Å—å –∫ –≤–≤–æ–¥—É –Ω–∏–∫–Ω–µ–π–º–∞:")
        return NICKNAME
    elif data == "back_player_id":
        await query.message.reply_text("–í–µ—Ä–Ω–∏—Å—å –∫ –≤–≤–æ–¥—É –∞–π–¥–∏:")
        return PLAYER_ID
    elif data == "back_age":
        await query.message.reply_text("–í–µ—Ä–Ω–∏—Å—å –∫ –≤–≤–æ–¥—É –≤–æ–∑—Ä–∞—Å—Ç–∞:")
        return AGE
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NICKNAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, nickname),
                CallbackQueryHandler(button)
            ],
            PLAYER_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, player_id),
                CallbackQueryHandler(button)
            ],
            AGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, age),
                CallbackQueryHandler(button)
            ],
            KD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, kd),
                CallbackQueryHandler(button)
            ],
            MATCHES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, matches),
                CallbackQueryHandler(button)
            ],
        },
        fallbacks=[CallbackQueryHandler(button)],
        per_message=True,  # üî• –í–æ—Ç —ç—Ç–æ –¥–æ–±–∞–≤–∏–ª –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    )

    application.add_handler(conv_handler)

    port = int(os.environ.get("PORT", 10000))

    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=f"https://clan-bot-2-1.onrender.com/{TOKEN}",
    )

if __name__ == '__main__':
    main()
