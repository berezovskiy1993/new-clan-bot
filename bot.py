from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackContext, CallbackQueryHandler
import os

# –¢–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = '7912601677:AAE_saIpU_55S2dgEdnEnnXov0pw33BPVu0'
ADMIN_ID = 894031843  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
GROUP_ID = -1002640250280  # ID –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø—ã

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
READY, NICKNAME, PLAYER_ID, AGE, GENDER, KD_CURRENT, KD_PREVIOUS, MATCHES_CURRENT, MATCHES_PREVIOUS, SCREENSHOT_1, SCREENSHOT_2 = range(11)

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∫–ª–∞–Ω–∞
ADMINS = ["@Admin1", "@Admin2", "@Admin3"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã –∞–¥–º–∏–Ω–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
def get_buttons():
    keyboard = [
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='reset_button')],
        [InlineKeyboardButton("–ö—Ä–∏—Ç–µ—Ä–∏–∏", callback_data='criteria_button')],
        [InlineKeyboardButton("–ê–¥–º–∏–Ω—ã", callback_data='admins_button')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_photo(
        photo="https://ibb.co/JRbbTWsQ",
        caption=" "
    )
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–ª–∞–Ω–∞ DEKTRIAN FAMILY. –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω - –Ω–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.",
        reply_markup=get_buttons()
    )
    return READY

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
async def ready(update: Update, context: CallbackContext) -> int:
    user_response = update.message.text.lower()
    if user_response == '–¥–∞':
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")
        return NICKNAME
    elif user_response == '–Ω–µ—Ç':
        await update.message.reply_text("–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –Ω–∞–ø–∏—à–∏ '–¥–∞'.")
        return READY
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return READY

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
async def nickname(update: Update, context: CallbackContext) -> int:
    context.user_data['nickname'] = update.message.text
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –∞–π–¥–∏.",
        reply_markup=get_buttons()
    )
    return PLAYER_ID

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ ID
async def player_id(update: Update, context: CallbackContext) -> int:
    context.user_data['player_id'] = update.message.text
    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?",
        reply_markup=get_buttons()
    )
    return AGE

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
async def age(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    if update.message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        context.user_data.clear()
        await update.message.reply_text(
            "–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:",
            reply_markup=get_buttons()
        )
        return NICKNAME

    # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
    context.user_data['age'] = update.message.text
    await update.message.reply_text(
        "–¢—ã –¥–µ–≤–æ—á–∫–∞ –∏–ª–∏ –ø–∞—Ä–µ–Ω—å?",
        reply_markup=get_buttons()
    )
    return GENDER

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–∞
async def gender(update: Update, context: CallbackContext) -> int:
    if update.message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        context.user_data.clear()
        await update.message.reply_text(
            "–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:",
            reply_markup=get_buttons()
        )
        return NICKNAME

    context.user_data['gender'] = update.message.text.lower()
    await update.message.reply_text(
        "–ö–∞–∫–∞—è —É —Ç–µ–±—è –ö–î –∑–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω?",
        reply_markup=get_buttons()
    )
    return KD_CURRENT

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ö–î –∑–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω
async def kd_current(update: Update, context: CallbackContext) -> int:
    context.user_data['kd_current'] = update.message.text
    await update.message.reply_text(
        "–ö–∞–∫–æ–π —É —Ç–µ–±—è –ö–î –∑–∞ –ø—Ä–æ—à–ª—ã–π —Å–µ–∑–æ–Ω?",
        reply_markup=get_buttons()
    )
    return KD_PREVIOUS

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ö–î –∑–∞ –ø—Ä–æ—à–ª—ã–π —Å–µ–∑–æ–Ω
async def kd_previous(update: Update, context: CallbackContext) -> int:
    context.user_data['kd_previous'] = update.message.text
    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π —Ç—ã —Å—ã–≥—Ä–∞–ª –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ?",
        reply_markup=get_buttons()
    )
    return MATCHES_CURRENT

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω
async def matches_current(update: Update, context: CallbackContext) -> int:
    context.user_data['matches_current'] = update.message.text
    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π —Ç—ã —Å—ã–≥—Ä–∞–ª –≤ –ø—Ä–æ—à–ª–æ–º —Å–µ–∑–æ–Ω–µ?",
        reply_markup=get_buttons()
    )
    return MATCHES_PREVIOUS

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –∑–∞ –ø—Ä–æ—à–ª—ã–π —Å–µ–∑–æ–Ω
async def matches_previous(update: Update, context: CallbackContext) -> int:
    context.user_data['matches_previous'] = update.message.text
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –∏–≥—Ä—ã –∑–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω.",
        reply_markup=get_buttons()
    )
    return SCREENSHOT_1

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
async def screenshot_1(update: Update, context: CallbackContext) -> int:
    if update.message.photo:
        context.user_data['screenshot_1'] = update.message.photo[-1].file_id
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø—Ä–æ—à–ª—ã–π —Å–µ–∑–æ–Ω.",
            reply_markup=get_buttons()
        )
        return SCREENSHOT_2
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        return SCREENSHOT_1

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
async def screenshot_2(update: Update, context: CallbackContext) -> int:
    if update.message.photo:
        context.user_data['screenshot_2'] = update.message.photo[-1].file_id
        
        telegram_username = update.message.from_user.username
        telegram_user_id = update.message.from_user.id        
        
        application_text = (
            f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω DEKTRIAN FAMILY:\n"
            f"–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: {context.user_data['nickname']}\n"
            f"–ò–≥—Ä–æ–≤–æ–π –∞–π–¥–∏: {context.user_data['player_id']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
            f"–ü–æ–ª: {context.user_data['gender']}\n"
            f"–ö–î –∑–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: {context.user_data['kd_current']}\n"
            f"–ú–∞—Ç—á–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ: {context.user_data['matches_current']}\n"
            f"–ö–î –∑–∞ –ø—Ä–æ—à–ª—ã–π —Å–µ–∑–æ–Ω: {context.user_data['kd_previous']}\n"
            f"–ú–∞—Ç—á–∏ –≤ –ø—Ä–æ—à–ª–æ–º —Å–µ–∑–æ–Ω–µ: {context.user_data['matches_previous']}\n"
            f"Telegram Username: @{telegram_username}\n"
            f"Telegram UserID: {telegram_user_id}\n"
        )

        try:
            await context.bot.send_message(ADMIN_ID, application_text)
            await context.bot.send_message(GROUP_ID, application_text)
            await context.bot.send_photo(ADMIN_ID, photo=context.user_data['screenshot_1'])
            await context.bot.send_photo(ADMIN_ID, photo=context.user_data['screenshot_2'])
            await context.bot.send_photo(GROUP_ID, photo=context.user_data['screenshot_1'])
            await context.bot.send_photo(GROUP_ID, photo=context.user_data['screenshot_2'])
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

        await update.message.reply_text(
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –õ–∏–¥–µ—Ä—É –∫–ª–∞–Ω–∞ @DektrianTV.",
            reply_markup=get_buttons()
        )
        
    return ConversationHandler.END

# –í–ê–ñ–ù–û: –ù–æ–≤—ã–π —Å–±—Ä–æ—Å
async def reset(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    context.user_data.clear()  # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö

    await query.message.edit_text(
        "üîÑ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã.\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ!",
        reply_markup=get_buttons()
    )
    return READY  # <-- –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ "–ì–æ—Ç–æ–≤?"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == 'reset_button':
        return await reset(update, context)
    elif query.data == 'criteria_button':
        criteria_text = (
            "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–ª–∞–Ω–∞ DEKTRIAN FAMILY:\n"
            "1. –°–º–µ–Ω–∞ —Ç–µ–≥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π.\n"
            "2. –ö–î –Ω–∞ 100 –º–∞—Ç—á–µ–π: –¥–µ–≤—É—à–∫–∏ - 4; –º—É–∂—á–∏–Ω—ã - 5.\n"
            "3. –í–æ–∑—Ä–∞—Å—Ç 16+.\n"
            "4. –ê–∫—Ç–∏–≤ –≤ —á–∞—Ç–µ Telegram.\n"
            "5. –£—á–∞—Å—Ç–∏–µ –≤ —Å—Ç—Ä–∏–º–∞—Ö –ª–∏–¥–µ—Ä–∞ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∫–ª–∞–Ω–∞.\n\n"
            "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–ª–∞–Ω–∞ DEKTRIAN ACADEMY:\n"
            "1. –°–º–µ–Ω–∞ —Ç–µ–≥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π.\n"
            "2. –ö–î –∏ –º–∞—Ç—á–∏ –Ω–µ –≤–∞–∂–Ω—ã.\n"
            "3. –í–æ–∑—Ä–∞—Å—Ç 14+.\n"
            "4. –ê–∫—Ç–∏–≤ –≤ —á–∞—Ç–µ.\n"
            "5. –£—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.\n\n"
            "–ö—Ä–∏—Ç–µ—Ä–∏–∏ DEKTRIAN ESPORTS:\n"
            "1. –í–æ–∑—Ä–∞—Å—Ç 16+.\n"
            "2. –ù–∞–ª–∏—á–∏–µ —Ö–∞–π–ª–∞–π—Ç–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"
            "3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )
        await query.message.edit_text(criteria_text, reply_markup=get_buttons())
    elif query.data == 'admins_button':
        admins_text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∫–ª–∞–Ω–∞:\n" + "\n".join(ADMINS)
        await query.message.edit_text(admins_text, reply_markup=get_buttons())
    return

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    application = Application.builder().token(TOKEN).build()

    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            READY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ready)],
            NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, nickname)],
            PLAYER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, player_id)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, gender)],
            KD_CURRENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, kd_current)],
            KD_PREVIOUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, kd_previous)],
            MATCHES_CURRENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, matches_current)],
            MATCHES_PREVIOUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, matches_previous)],
            SCREENSHOT_1: [MessageHandler(filters.PHOTO, screenshot_1)],
            SCREENSHOT_2: [MessageHandler(filters.PHOTO, screenshot_2)],
        },
        fallbacks=[]
    )

    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(conversation_handler)

    port = int(os.environ.get("PORT", 10000))

    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=f"https://clan-bot-2-1.onrender.com/{TOKEN}",
    )

if __name__ == '__main__':
    main()
